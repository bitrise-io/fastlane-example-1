fastlane_version "2.19.2"

default_platform :ios

platform :ios do
  changelog = ""
  default_payloads = [:lane, :test_result, :git_branch, :git_author]

  before_all do
    # コミットログを控えておく
    changelog = changelog_from_git_commits_hs
  end


  desc "Runs all the tests"
  lane :test do
    scan
    xcov(
      workspace: "classi.xcworkspace",
      scheme: "ClassiTests"
    )
    danger
  end


  desc "Deploy a new version to the Fabric Beta"
  lane :beta do
    # 証明書のダウンロードとインストール
    match(type: "development", force_for_new_devices: true)

    # build number を更新
    increment_build_number(build_number: Time.now.strftime("%Y%m%d%H%M"))

    # アプリアイコンに beta の文字を載せる
    badge(shield: "#{get_version_number}-#{get_build_number}-blue", dark: true)

    # コンパイルと ipa 作成
    gym

    # ipa, dSYMs を Artifacts に格納
    if is_ci?
      sh "cp #{lane_context[SharedValues::IPA_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
      sh "cp #{lane_context[SharedValues::DSYM_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
    end

    # beta 配布
    crashlytics(
      crashlytics_path: "Pods/Crashlytics/iOS/Crashlytics.framework",
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      ipa_path: lane_context[SharedValues::IPA_OUTPUT_PATH],
      notes: changelog,
      groups: "CLASSI_APP"
    )

    # dSYMs を crashlytics に upload
    upload_symbols_to_crashlytics

    # slack に結果を通知
    payload = {"Git Commit" => changelog}
    payload["Circle Artifacts Url"] = ENV["CIRCLE_BUILD_URL"] + "#artifacts/containers/0" if is_ci?
    slack(
      message: ":crashlytics: Beta App successfully released!",
      payload: payload,
      default_payloads: default_payloads
    )
  end


  desc "Deploy a new version to the App Store"
  lane :release do
    # 証明書のダウンロードとインストール
    match(type: "appstore")

    # build number を更新
    increment_build_number(build_number: Time.now.strftime("%Y%m%d%H%M"))

    # コンパイルと ipa 作成
    gym(scheme: "Release")

    # ipa, dSYMs を Artifacts に格納
    if is_ci?
      sh "cp #{lane_context[SharedValues::IPA_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
      sh "cp #{lane_context[SharedValues::DSYM_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
    end

    # ipa ファイルを iTunes Connect に提出
    deliver

    # dSYMs を crashlytics に upload
    upload_symbols_to_crashlytics

    # git tag を打つ、同じ version でなんども tag を打つ可能性があるので force する
    add_git_tag(
      tag: "v#{get_version_number}",
      message: "build_number: #{get_build_number} by fastlane\n\n#{changelog}",
      force: true
    )
    push_git_tags(force: true)

    payload = {"Git Commit" => changelog}
    slack(
      message: ":itunesconnect: Successfully uploaded a new App Store build",
      payload: payload,
      default_payloads: default_payloads
    )
  end


  desc "dSYMs を iTunesConnect から DL し crashylitics に upload する"
  lane :refresh_dsyms do
    download_dsyms
    upload_symbols_to_crashlytics
    clean_build_artifacts

    slack(
      message: "Successfully uploaded dSYMs to :crashlytics:",
      payload: {
        "Circle Build Url" => ENV["CIRCLE_BUILD_URL"]
      }
    )
  end


  desc "%h %s の commit log を返却する"
  lane :changelog_from_git_commits_hs do
    changelog_from_git_commits(
      between: ["HEAD^", "HEAD"],
      pretty: '%h %s'
    )
  end


  desc "app_version を更新して release ブランチを GitHub に作成"
  desc "ex: fastlane release_branch version:1.0.0"
  lane :release_branch do |options|
    # 引数に release version があることを確認
    UI.user_error!("Required release version. ex: fastlane release_branch version:1.0.0") unless options[:version]
    branch = "release/#{options[:version]}"

    # master branch に戻り更新する
    sh("git checkout master && git pull origin master")
    sh("git checkout -b #{branch}")

    # 引数で指定したアプリの version に更新しコミット
    increment_version_number(version_number: options[:version])
    commit_version_bump(
      message: "Create #{branch} branch.",
      xcodeproj: "classi.xcodeproj"
    )

    # GitHub に Push し PullReqeust を作成する
    push_to_git_remote
    create_pull_request(
      repo: "classi/classi_ios_app",
      title: "#{branch}",
      body: "release v#{options[:version]}"
    )
  end


  error do |lane, exception|
    slack(
      message: exception.message,
      success: false,
      payload: {
        "Circle Build Url" => ENV["CIRCLE_BUILD_URL"]
      }
    )
  end
end

